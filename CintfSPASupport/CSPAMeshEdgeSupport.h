/*
 * CSPAMeshEdgeSupport.h - Class defintion for mesh edge Support
 *
 */

/* Generated by Together */

#ifndef CSPAMESHEDGESUPPORT_HPP
#define CSPAMESHEDGESUPPORT_HPP
#include "interface_api/IMeshEdgeSupport.h"
#include "interface_api/SPAInterface.h"
#include "SPAstlmemory/SPANew.hxx"

class CSPAMeshEdgeSupport : public IMeshEdgeSupport
{
public:

    SPA_DECLARE_NEW_DELETE( CSPAMeshEdgeSupport )

    static IMeshEdgeSupport* createInstance (SPA_TzMeshEdgeSupport&  zMeshEdgeSupport);

    static IMeshEdgeSupport* getInstance();

    static void deleteInstance();

    /** mesh definitions (return -1 if not defined) */
    virtual int queryElementSize(int iEdgeId, double* pdElemSize);

    /** frozen status */
    virtual bool IsFrozen(int iEdgeId);

    /** local size definition */
    virtual int queryNumLocalSizePts(int iEdgeId);

    virtual int queryLocalSizePts(int iEdgeId, double adXYZ[],
                                  double adLocalSize[]);

    /** element count and biasing definition */
    virtual int queryElementCountDef(int iEdgeId, int* piNumElem);

    virtual int queryBiasingDef(int iEdgeId, double* pdBias);


    /** hard points definition */
    virtual int queryNumHardPoints(int iEdgeId);

    virtual int queryHardPoints(int iEdgeId, int aiHardPtIds[], double adXYZ[]);

    /** frozen nodes */

    virtual int queryNumFrozenNodes(int iEdgeId);

    virtual int queryFrozenNodes(int iEdgeId, int aiNodeId[], double adXYZ[],
		                         double adT[], int *piElemOrder);

    virtual int queryElementOrder(int iEdgeId);

    virtual int queryNumSlaves(int iEdgeId);

    virtual int querySlaves( int iEdgeId, int aiSlaveEdges[]);

    virtual bool isSlave(int iEdgeId);

    virtual int queryNumEdgeSections( int iEdgeId );

    virtual int queryEdgeSections( int  iEdgeId, SPA_TzEdgeSection* apzEdgeSections[] );

    virtual int queryEdgeDensity( int  iEdgeId, SPA_TzEdgeDensityData *pzEdgeDensityData);

	virtual int isCollapsible( int iEdgeId);

	virtual bool isWeldRow(int iEdgeId);
	virtual int  queryNumWeldRowFaces(int iEdgeId);
	virtual int  queryWeldRowFaces(int iEdgeId, int aiFaces[]);
	virtual int  queryWeldRowFaceSides(int iEdgeId, int aiFaceSides[]);
	virtual int  queryWeldRowFaceNumLayers(int iEdgeId, int aiFaceNumLayers[]);
	virtual int  queryWeldRowFaceOffsets (int iEdgeId, double adFaceOffsets[]);
	virtual double queryWeldRowSpacing(int iEdgeId);
	virtual int queryMappedLoopNumLayers (int iEdgeId);
    virtual double queryMappedLoopOffset(int iEdgeId);
    virtual double queryMappedLoopSpacing(int iEdgeId);
	virtual bool isRidgeEdge(int iEdgeId);
	virtual int queryRidgeEdgeData (int		iEdgeId, 
		                            int		*pnLayers, 
								    double	*pdTotalLayerDepth, 
								    double	*pdSizeAlongLength, 
								    int		*pnCountAlongLength); 

protected:

    CSPAMeshEdgeSupport(SPA_TzMeshEdgeSupport&  zMeshEdgeSupport);

    virtual ~CSPAMeshEdgeSupport(){}

private:

    static CSPAMeshEdgeSupport*     m_pzInstance;

    SPA_TzMeshEdgeSupport&  m_zMeshEdgeSupport;

    // CSPAMeshEdgeSupport( const CSPAMeshEdgeSupport &X){}

    CSPAMeshEdgeSupport& operator= ( 
        const CSPAMeshEdgeSupport &X) { return *this; }

};
#endif //CSPAMESHEDGESUPPORT_HPP




