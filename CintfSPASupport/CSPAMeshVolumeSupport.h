/*
 * CSPAMeshVolumeSupport.h - class defintion for Mesh Volume Support
 *
 *
 */
// 11-13-03     Vasa Reddy          SCS38898 - Added nastran EPLR check.
/* Generated by Together */

#ifndef CSPAMESHVOLUMESUPPORT_HPP
#define CSPAMESHVOLUMESUPPORT_HPP

#include "interface_api/IMeshVolumeSupport.h"
#include "interface_api/SPAInterface.h"
#include "SPAstlmemory/SPANew.hxx"

class CSPAMeshVolumeSupport : public IMeshVolumeSupport 
{
public:

    SPA_DECLARE_NEW_DELETE( CSPAMeshVolumeSupport )

    static IMeshVolumeSupport* createInstance( SPA_TzMeshVolumeSupport&  zMeshVolumeSupport );
    static IMeshVolumeSupport* getInstance();

    static void deleteInstance();

    /** mesh definitions (return -1 if not defined) */

    /** frozen status */
    virtual bool IsFrozen          ( int iVolumeId );

     /** frozen data access */
    virtual int  queryNumInternalFrozenNodes   ( int iVolumeId);
    virtual int  queryInternalFrozenNodes      ( int iVolumeId, int aiNodes[], double adXYZ[]);
    virtual int  queryNumFrozenElements( int iVolumeId);
    virtual int  queryFrozenElements   ( int iVolumeId, int aiElems[], int aiElemTypes[], 
                                         int aiElemConn[], int *piElemOrder);


    /** mesh methods */
    virtual int  queryMeshMethod   ( int iVolumeId );
    virtual int  querySpaceStrategy( int iVolumeId );  /** 1: PS, 2: MAP, 3: Flattening */
    virtual void querySmoothCleanOptions( int iVolumeId, int* piSmoothOption, int* piCleanOption ); /** 0: off, 1: on */

    virtual int  queryElementSize  ( int iVolumeId, double* pdElemSize );
    virtual int  queryElementType  ( int iVolumeId );
    virtual int  queryElementOrder ( int iVolumeId );

    virtual int  queryStraightEdgesOption(int iVolumeId);
    virtual void queryMidNodeQualityChecks( int     iVolumeId,
		                                    int*    piCheckJacobian,
                                            double* pdMinJacobian,
                                            int*    piCheckDeviationRatio,
                                            double* pdMaxDeviationRatio,
                                            int*    piCheckNastranEPLR 
                                            );
	virtual double queryGrowthFactor();

protected:

             CSPAMeshVolumeSupport( SPA_TzMeshVolumeSupport&  zMeshVolumeSupport );
    virtual ~CSPAMeshVolumeSupport(){};

private:

    SPA_TzMeshVolumeSupport& m_zMeshVolumeSupport;

private:

    static CSPAMeshVolumeSupport* m_pzInstance;

private:

//           CSPAMeshVolumeSupport( const CSPAMeshVolumeSupport& X ) {}

    CSPAMeshVolumeSupport& operator=( const CSPAMeshVolumeSupport& X ) { return *this; }

};
#endif //SPAMESHVOLUMESUPPORT_HPP

